{
  "hash": "7b32bdbd24389ce7819473f4d71352b9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"measr 0.3.1\"\ndate: 2023-06-06\ndescription: \"A few updates for specifying models and priors.\"\nimage: \"featured.jpg\"\nimage-alt: \"Measurement tools on a desk\"\ntitle-block-banner: featured.jpg\ntwitter-card:\n  image: \"featured.jpg\"\nopen-graph:\n  image: \"featured.jpg\"\nengine: knitr\ndoi: 10.59350/mt80h-8pp67\ncitation: true\n# one of: \"deep-dive\", \"learn\", \"package\", or \"other\" + relevant packages\ncategories:\n  - package\n  - measr\n---\n\n\n\n\n\nWe're stoked to announce the release of [measr](https://measr.info) 0.3.1.\nThe goal of measr is to provide applied researchers and psychometricians with a user friendly interface for estimating and evaluating diagnostic classification models (DCMs).\nThis update is a minor release to introduce a couple of enhancements to model and prior specifications.\n\nYou can install the update version of measr from CRAN with:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ninstall.packages(\"measr\")\n```\n:::\n\n\n\nThis blog post will highlight the two enhancements included in the update.\nFor a complete list of changes, check out the [changelog](https://measr.info/news/index.html#measr-031).\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(measr)\n```\n:::\n\n\n\n## Model Specifications\n\nIn this version, support for a new DCM subtype was added.\nThe compensatory reparameterized unified model (C-RUM) model can now be specified in `measr_dcm()` with `type = \"crum\"`.\nThe C-RUM is similar to the log-linear cognitive diagnostic model (LCDM), except the C-RUM estimates only item-level intercepts and main effects (i.e., no interactions when multiple attributes are measured by an item).\nBecause of this, along with the addition of the C-RUM, the LCDM now has additional flexibility through the new `max_interaction` argument.\nWhen using `type = \"lcdm\"`, `max_interaction` specifies the highest level interaction to be estimated.\nFor example, setting `max_interaction = 2` would estimate the LCDM with only intercepts, main effects, and two-way interactions.\nIf an item measures 3 or more attributes, the 3-way interactions and higher will be excluded.\nSpecifying `type = \"lcdm\"` with `max_interaction = 1` is equivalent to the C-RUM, as 1 indicates that main effects are the highest-level interaction to be estimated.\n\nThis version also introduces new options for the structural component of the DCMs.\nCurrently two attributes structures are possible, and are defined through the `attribute_structure` argument.\nThe first is `attribute_structure = \"unconstrained\"`.\nThis is the default, which makes no assumptions about the relationships between attributes.\nSpecifying and unconstrained structural model is equivalent to the saturated structural model described by [Hu & Templin (2020)](https://doi.org/10.1080/00273171.2019.1632165) and in Chapter 8 of [Rupp et al. (2010)](https://www.amazon.com/Diagnostic-Measurement-Applications-Methodology-Sciences/dp/1606235273).\nThe other option currently supported is `attribute_structure = \"independent\"`.\nWhen an independent attribute structure is specified, the proficiency or the presence of one attribute is independent of other attributes.\nFuture development will include additional attribute structure specifications such as a reduced loglinear model (e.g., [Thompson, 2018](https://dissertation.wjakethompson.com)) or a Bayesian Network (e.g., [Hu & Templin, 2020](https://doi.org/10.1080/00273171.2019.1632165); [Martinez & Templin, 2023](https://doi.org/10.31234/osf.io/pjc5f)).\n\n## Prior Specifications\n\nThere are two main improvements to prior specifications included in this release.\nFirst, custom prior distributions can be specified for the structural model parameters.\nWe can view the default parameters for each attribute structure specification with:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndefault_dcm_priors(type = \"lcdm\", attribute_structure = \"unconstrained\")\n#> # A tibble: 4 × 3\n#>   class       coef  prior_def                  \n#>   <chr>       <chr> <chr>                      \n#> 1 intercept   <NA>  normal(0, 2)               \n#> 2 maineffect  <NA>  lognormal(0, 1)            \n#> 3 interaction <NA>  normal(0, 2)               \n#> 4 structural  Vc    dirichlet(rep_vector(1, C))\n\ndefault_dcm_priors(type = \"lcdm\", attribute_structure = \"independent\")\n#> # A tibble: 4 × 3\n#>   class       coef  prior_def      \n#>   <chr>       <chr> <chr>          \n#> 1 intercept   <NA>  normal(0, 2)   \n#> 2 maineffect  <NA>  lognormal(0, 1)\n#> 3 interaction <NA>  normal(0, 2)   \n#> 4 structural  <NA>  beta(1, 1)\n```\n:::\n\n\n\nWe can also view the specific parameters available for a specific model using the `get_parameters()` function.\nFor example, using the ECPE Q-matrix, we can see the available parameters for each type of model.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nget_parameters(ecpe_qmatrix, attribute_structure = \"unconstrained\") |> \n  filter(class == \"structural\")\n#> # A tibble: 1 × 4\n#>   item_id class      attributes coef  \n#>     <int> <chr>      <chr>      <glue>\n#> 1      NA structural <NA>       Vc\n\nget_parameters(ecpe_qmatrix, attribute_structure = \"independent\") |> \n  filter(class == \"structural\")\n#> # A tibble: 3 × 4\n#>   item_id class      attributes coef  \n#>     <int> <chr>      <chr>      <glue>\n#> 1      NA structural <NA>       eta[1]\n#> 2      NA structural <NA>       eta[2]\n#> 3      NA structural <NA>       eta[3]\n```\n:::\n\n\n\nThe second improvement is additional checking of user-specified priors.\nSpecifically, `measr_dcm()` will now throw and error if we try to specify a prior for a class or coefficient that is inconsistent with our chosen DCM.\nFor example, in the previous example of structural model priors that there are different parameters depending on whether an unconstrained or independent structure is specified.\nIf we try to define a prior for `eta[1]`, which is only relevant for an independent structure, but an unconstrained structure is specified, we get an error.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmeasr_dcm(data = ecpe_data, qmatrix = ecpe_qmatrix,\n          resp_id = \"resp_id\", item_id = \"item_id\",\n          attribute_structure = \"unconstrained\",\n          prior = prior(beta(5,17), class = \"structural\", coef = \"eta[1]\"))\n#> Error in `abort_bad_argument()`:\n#> ! Prior for parameter `eta[1]` with class `structural` is not relevant for the chosen model or specified Q-matrix. See `?get_parameters()` for a list of relevant parameters.\n```\n:::\n\n\n\nAs always, please [open an issue](https://github.com/wjakethompson/measr/issues) with any bugs or feature requests for future development!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}